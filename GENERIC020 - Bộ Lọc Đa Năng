import java.util.*;
interface Filter<T>{
    public boolean test(T t);
}
class GenericFilter{
    public static <T> List<T> filter(List<T> input, Filter<T> filter){
        List<T> result = new ArrayList<>();
        for(T item:input){//duyệt qua từng phần tử của input đầu vào
            if(filter.test(item)){//kiểm tra xem từng phần tử có thỏa mãn điều kiện lọc không
            result.add(item);
        }
    }return result;
}}
class IntegerEvenFilter implements Filter<Integer>{
    public boolean test(Integer number){
        return number%2==0;//kiểm tra số chẵn
    }

}
class StringLengthFilter implements Filter<String>{
    private int minLength;
    public StringLengthFilter(int minLength){
        this.minLength = minLength;
    }
    public boolean test(String s){
        return s.length()>= minLength;
    }
}
class Employee{
    private String name;
    private double salary;
    public Employee(String name, double salary){
        this.name = name;
        this.salary = salary;
    }
    public String getName(){
        return name;
    }
    public double getSalary(){
        return salary;
    }
    public String toString(){
        return String.format("%s %.1f", getName(), getSalary());
    }
}
class EmployeeSalaryFilter implements Filter<Employee>{
    private double minSalary;
    public EmployeeSalaryFilter(double minSalary){
        this.minSalary = minSalary;
    }
    public boolean test(Employee e){
        return e.getSalary()>=minSalary;
    }
}
public class Main{
    public static <T> void printRS(List<T> list){
        if(list.isEmpty()){
            System.out.println("None");
        }
        else{
            for(T item:list){
                System.out.println(item);
            }
        }
    }
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();

        
        while(t-->0){
            while(true){
            String line = sc.nextLine();
            if(line.equals("End"))
                break;
                String[] parts = line.split(" ");
                    if (parts[0].equals("FilterIntEven")) {
                        int n = Integer.parseInt(parts[1]);
                        List<Integer> numbers = new ArrayList<>();
                        for (int i = 0; i < n; i++) {
                            numbers.add(Integer.parseInt(parts[i + 2]));//thêm số vào list
                        }
                        List<Integer> result = GenericFilter.filter(numbers, new IntegerEvenFilter());
                        printRS(result);
                    } else if (parts[0].equals("FilterStringLength")) {
                        List<String> strings = new ArrayList<>();
                        int minLength = Integer.parseInt(parts[1]);
                        int n = Integer.parseInt(parts[2]);
                        for (int i = 0; i < n; i++) {
                            strings.add(parts[3 + i]);//thêm chuỗi vào list
                        }
                        List<String> result = GenericFilter.filter(strings, new StringLengthFilter(minLength));
                        printRS(result);
                    } else if (parts[0].equals("FilterEmployeeSalary")) {
                        List<Employee> employee = new ArrayList<>();
                        double minSalary = Double.parseDouble(parts[1]);
                        int n = Integer.parseInt(parts[2]);
                        for (int i = 0; i < n; i++) {
                            String name = parts[3 + 2 * i];
                            double salary = Double.parseDouble(parts[4 + 2 * i]);
                            employee.add(new Employee(name, salary));
                        }
                        List<Employee> result = GenericFilter.filter(employee, new EmployeeSalaryFilter(minSalary));
                        printRS(result);
                    }
        }
    }}
}
