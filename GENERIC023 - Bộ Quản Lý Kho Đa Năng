import java.util.*;
interface Predicate<T>{
    boolean test(T t);
}
interface Function<T,R>{
    R apply(T t);
}
class Warehouse<T>{
    List<T> items;
    public Warehouse(List<T> items){
        this.items = new ArrayList<>(items);
    }
    public Optional<T> findById(String id, Function<T, String> idExtractor){
        for(T x:items){//duyệt qua từng phần tử trong items
            if(id.equals(idExtractor.apply(x))){//nếu id bằng với id đã nhập từ bên ngoài (idExtractor.apply(item): Gọi function để lấy ID của item hiện tại)
                return Optional.of(x);//trả về kết quả của id vừa nhập
            }
        } return Optional.empty();//nếu không tìm thấy id, trả về rỗng
    }
    public List<T> filter(Predicate<T> predicate){
        List<T> result = new ArrayList<>();
        for(T x:items){
            if(predicate.test(x)){
                result.add(x);
            }
        }return result;
    }
    public List<T> sort(Comparator<T> comparator){
        List<T> result = new ArrayList<>(items);
        result.sort(comparator);
        return result;
    }
    public Optional<T> max(Comparator<T> comparator){
        if(items.isEmpty()){
            return Optional.empty();
        }
        T maxitem = items.get(0);//lấy phần tử đầu tiên của ds để so sánh
        for(int i=1;i<items.size();i++){
            if(comparator.compare(items.get(i), maxitem)>0){
                maxitem = items.get(i);// so sánh từ phần tử thứ 2 trở đi với phần tử trước đó (là maxitem), nếu > 0 tức là phần tử sau lớn hơn phần tử trước, gán phần tử sau thành maxitem
            }
        }
        return Optional.of(maxitem);
    }
    public Optional<T> min(Comparator<T> comparator){
        if(items.isEmpty()){
            return Optional.empty();
        }
        T minitem = items.get(0);
        for(int i=1;i<items.size();i++){
            if(comparator.compare(items.get(i),minitem)<0){
                minitem = items.get(i);
            }
        }return Optional.of(minitem);
    }
    public void addItem(T item){
        items.add(item);
    }
}
class Product implements Comparable<Product>{
    private String id;
    private String name;
    private double price;
    public Product(String id, String name, double price){
        this.id = id;
        this.name = name;
        this.price = price;
    }
    public String getId(){
        return id;
    }
    public String getName(){
        return name;
    }
    public double getPrice(){
        return price;
    }
    public int compareTo(Product other){
        return Double.compare(this.price, other.price);
    }
    public String toString() {
        return String.format("Product{id='%s', name='%s', price=%.1f}", id, name, price);
    }
}
class Book extends Product{
    private String author;
    public Book(String id, String name, double price, String author){
        super(id, name, price);
        this.author = author;
    }
    public String getAuthor(){
        return author;
    }
    public String toString() {
       return String.format("Book{id='%s', name='%s', price=%.1f, author='%s'}",
               getId(), getName(), getPrice(), author);
   }
}
public class Main{
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine();
        while(t-->0){
            String line;
            Warehouse<Product> warehouse = new Warehouse<>(new ArrayList<>());
            while(!(line=sc.nextLine()).equals("End")){
                String[] parts = line.split("\\s+");
                if(parts[0].equals("AddBook")){
                    String id = parts[1];
                    String name = parts[2];
                    double price = Double.parseDouble(parts[3]);
                    String author = parts[4];
                    warehouse.addItem(new Book(id, name, price, author));
                }
                else if(parts[0].equals("FindById")){
                    String id = parts[1];
                    Optional<Product> result = warehouse.findById(id, product-> product.getId());
                    if(result.isPresent()){
                        System.out.println(result.get());
                    }
                    else{
                        System.out.println("Not found");
                    }
                }
                else if(parts[0].equals("FilterPriceAbove")){
                    double price = Double.parseDouble(parts[1]);
                    List<Product> result = warehouse.filter(product->product.getPrice()>price);
                    if(result.isEmpty()){
                        System.out.println("Not found");
                    }
                    else{
                        for(Product x:result){
                            System.out.println(x);
                        }
                    }
                }
                else if(parts[0].equals("SortByName")){
                    List<Product> result = warehouse.sort((p1,p2)->p1.getName().compareTo(p2.getName()));
                    if(result.isEmpty()){
                        System.out.println("Not found");
                    }
                    else{
                        for(Product x:result){
                            System.out.println(x);
                        }
                    }
                }
                else if(parts[0].equals("MaxByPrice")){
                    Optional<Product> result = warehouse.max((p1,p2)->Double.compare(p1.getPrice(), p2.getPrice()));
                    if(result.isPresent()){
                        System.out.println(result.get());
                    }
                    else{
                        System.out.println("Not found");
                    }
                }
                else if(parts[0].equals("MinByPrice")){
                    Optional<Product> result = warehouse.min((p1,p2)->Double.compare(p1.getPrice(), p2.getPrice()));
                    if(result.isPresent()){
                        System.out.println(result.get());
                    }
                    else{
                        System.out.println("Not found");
                    }
                }
            }
        }
    }
}
